import net.vivin.gradle.versioning.tasks.TagTask

plugins {
    // build scan plugin should be the first in the list to not  important information in the scans
    id 'com.gradle.build-scan' version '1.5'
    id 'com.gradle.plugin-publish' version '0.9.4'
    id 'net.vivin.gradle-semantic-build-versioning' version '2.0.1'
    id 'groovy'
    id 'maven-publish'
    id 'jacoco'
    id 'java-gradle-plugin'
}

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

group 'net.vivin'
project.version.with {
    startingVersion = '1.1.2'
}

tasks.withType(TagTask) {
    it.dependsOn publishPlugins
}
publishPlugins.dependsOn build

repositories {
    jcenter()
}

sourceCompatibility = 1.7

sourceSets.main.java.srcDirs = []
sourceSets.main.groovy.srcDir 'src/main/java'

task createPluginClasspathFile {
    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir "$temporaryDir"
    doLast {
        file("$temporaryDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}

configurations {
    jacocoRuntime
}

task createJacocoAgentClasspathFile {
    inputs.files configurations.jacocoRuntime
    outputs.dir "$temporaryDir"
    doLast {
        def jacocoAgentClasspathFile = file("$temporaryDir/jacoco-agent-classpath.txt")
        jacocoAgentClasspathFile.text = """|${configurations.jacocoRuntime.asPath}
                                           |${test.jacoco.destinationFile.absolutePath}""".stripMargin()
    }
}

dependencies {
    compile 'org.eclipse.jgit:org.eclipse.jgit:4.4.0.201606070830-r'

    testCompile 'org.eclipse.jgit:org.eclipse.jgit.junit:4.4.0.201606070830-r'
    testCompile 'org.jmockit:jmockit:1.28'
    testCompile('org.spockframework:spock-core:1.0-groovy-2.4') {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
    testRuntime 'cglib:cglib-nodep:3.2.4'
    testRuntime 'org.objenesis:objenesis:2.5.1'

    jacocoRuntime "org.jacoco:org.jacoco.agent:$jacoco.toolVersion:runtime"

    testRuntime files(createPluginClasspathFile)
    testRuntime files(createJacocoAgentClasspathFile)
}

jacocoTestReport {
    doFirst {
        classDirectories = classDirectories.collect { fileTree(it) { exclude '**/*$*_closure*' } }.sum()
    }

    reports {
        xml.enabled true
    }
}

// this is useful for better coverage values
// it should not be used for a final production build
if(project.hasProperty('disableGroovyOptimizations')) {
    compileGroovy {
        inputs.property 'disableGroovyOptimizations', project.hasProperty('disableGroovyOptimizations')
        groovyOptions.optimizationOptions.all = false
    }
}

test {
    jacoco.includes = ['net.vivin.gradle.versioning.*']
    jacoco.excludes = ['**/*$*_closure']
    finalizedBy jacocoTestReport
    doFirst {
        delete jacoco.destinationFile
    }
}

gradlePlugin {
    plugins {
        semanticBuildVersioningPlugin {
            id = 'net.vivin.gradle-semantic-build-versioning'
            implementationClass = 'net.vivin.gradle.versioning.SemanticBuildVersioningPlugin'
        }
    }
}

pluginBundle {
    website = 'https://github.com/vivin/gradle-semantic-build-versioning'
    vcsUrl = 'https://github.com/vivin/gradle-semantic-build-versioning'
    description = 'This is a gradle plugin that provides support for semantic versioning of builds. It is quite easy to use and extremely configurable. The plugin allows you to bump the major, minor, and patch version based on the latest version, which is identified from a git tag. It also allows you to bump pre-release versions based on a scheme that you define. The version can be bumped by using version-component-specific tasks or can be bumped automatically based on the contents of a commit message. If no tasks from the plugin are specifically invoked, the plugin will increment the version-component with the lowest precedence; this is usually the patch version, but can be the pre-release version if the latest version is a pre-release one.'
    tags = ['versioning', 'semantic-versioning', 'git', 'build-versioning', 'auto-versioning', 'version']

    plugins {
        semanticBuildVersioningPlugin {
            id = 'net.vivin.gradle-semantic-build-versioning'
            displayName = 'Gradle Semantic Build Versioning Plugin'
        }
    }
}
